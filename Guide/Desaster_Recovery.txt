<?php
// In to the bot conttoller Jut incase
namespace App\Http\Controllers\admin;

use App\Http\Controllers\Controller;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;

class BotController extends Controller
{
   /**
     * Fetch all user expense and income data.
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getAllExpenses(Request $request)
    {
        // Check if the authenticated user is an Admin
        $user = Auth::user();

        if (!$user || $user->type !== 'Admin') {
            return response()->json([
                'error' => 'Unauthorized access. Only Admins can access this resource.',
            ], 403);
        }

        // Query the UserExpenseIncomeView
        $data = DB::table('UserExpenseIncomeView')->get();

        // Check if data is found
        if ($data->isEmpty()) {
            return response()->json([
                'message' => 'No data found.',
            ], 404);
        }

        // Organize data into a structured format
        $organizedData = [];
        foreach ($data as $row) {
            $userId = $row->user_ID;

            // Initialize user data structure if not already set
            if (!isset($organizedData[$userId])) {
                $organizedData[$userId] = [
                    'user_ID' => $userId,
                    'user_name' => $row->user_name,
                    'user_email' => $row->user_email,
                    'incomes' => [],
                    'expenses' => [],
                ];
            }

            // Add income data
            if (!is_null($row->income_source_name)) {
                $organizedData[$userId]['incomes'][] = [
                    'source_name' => $row->income_source_name,
                    'amount' => $row->income_amount,
                    'frequency' => $row->income_frequency,
                    'description' => $row->income_description,
                ];
            }

            // Add expense data
            if (!is_null($row->expense_id)) {
                $organizedData[$userId]['expenses'][] = [
                    'expense_id' => $row->expense_id,
                    'expense_date' => $row->expense_date,
                    'reason_id' => $row->expense_reason_id,
                    'amount' => $row->expense_amount,
                    'description' => $row->expense_description,
                    'reason_text' => $row->reason_text,
                    'category_name' => $row->category_name,
                ];
            }
        }

        // Reset array keys to be sequential
        $organizedData = array_values($organizedData);

        // Send data to the external endpoint and process the response
        $botData = $this->sendExpensesToBotEndpoint($organizedData);

        // Call storeBotDataTest method
        return $this->storeBotDataTest($botData);
    }


    /**
     * Send expense data to an external endpoint and process the response data.
     */
    private function sendExpensesToBotEndpoint(array $organizedData)
    {
        $botEndpoint = env('BOT_API_END_POINT_POST_DATA');

        if (!$botEndpoint) {
            return response()->json([
                'error' => 'BOT_API_END_POINT_POST_DATA is not set in the .env file.',
            ], 500);
        }

        try {
            // Exponential backoff strategy for retries
            $response = Http::retry(5, 100, function ($exception, $request) {
                return $exception instanceof \Illuminate\Http\Client\RequestException;
            })->timeout(60)->post($botEndpoint, ['data' => $organizedData]);

            if ($response->successful()) {
                $botData = $response->json();

                // Log the response for debugging
                Log::info('Bot Response:', $botData);

                return $botData; // Return botData here
            } else {
                Log::error('Failed to send data to the bot endpoint. Response:', ['status' => $response->status(), 'body' => $response->body()]);
                return response()->json([
                    'error' => 'Failed to send data to the bot endpoint.',
                    'response' => $response->json(),
                ], $response->status());
            }
        } catch (\Exception $e) {
            Log::error('Error sending data to bot endpoint: ' . $e->getMessage());
            return response()->json([
                'error' => 'An error occurred while sending data to the bot endpoint.',
                'message' => $e->getMessage(),
            ], 500);
        }
    }



    public function storeBotData(Request $request)
    {
        $botData = $request->input('botData');
        // Validate botData here
        $validator = Validator::make(['data' => $botData], [
            'data' => 'required|array',
            'data.*.chart_data' => 'required|array',
            'data.*.chart_data.monthly' => 'required|array',
            'data.*.chart_data.weekly' => 'required|array',
            'data.*.chart_data.yearly' => 'required|array',
            'data.*.forecast' => 'required|array',
            'data.*.forecasting_message' => 'required|string',
            'data.*.insights' => 'required|string',
            'data.*.saving_percentage' => 'required|string',
            'data.*.spending_percentage' => 'required|string',
            'data.*.thread_id' => 'required|string',
            'data.*.user_id' => 'required|integer|exists:users,user_ID',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 400);
        }

        try {
            foreach ($botData as $entry) {
                // Prepare JSON strings for the stored procedure
                $weeklyData = json_encode(
                    array_map(function ($x, $y) {
                        return ['day_name' => $x, 'expense' => $y];
                    }, $entry['chart_data']['weekly']['x'], $entry['chart_data']['weekly']['y'])
                );

                $monthlyData = json_encode(
                    array_map(function ($x, $y) {
                        return ['week_name' => $x, 'expense' => $y];
                    }, $entry['chart_data']['monthly']['x'], $entry['chart_data']['monthly']['y'])
                );

                $yearlyData = json_encode(
                    array_map(function ($x, $y) {
                        return ['month_name' => $x, 'expense' => $y];
                    }, $entry['chart_data']['yearly']['x'], $entry['chart_data']['yearly']['y'])
                );

                $forecast = json_encode($entry['forecast']);
                $insights = json_encode([
                    'forecasting_message' => $entry['forecasting_message'],
                    'insights' => $entry['insights'],
                    'saving_percentage' => $entry['saving_percentage'],
                    'spending_percentage' => $entry['spending_percentage'],
                ]);

                // Call the stored procedure
                DB::statement('CALL AddUserBotInfo(?, ?, ?, ?, ?, ?, ?)', [
                    $entry['user_id'],
                    $weeklyData,
                    $monthlyData,
                    $yearlyData,
                    $forecast,
                    $insights,
                    $entry['thread_id'],
                ]);
            }

            return response()->json([
                'message' => 'Bot data stored successfully',
            ], 201);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Failed to store bot data',
                'error' => $e->getMessage(),
            ], 500);
        }
    }


    public function storeBotDataTest(array $botData)
    {
        $validatedData = $this->validateBotData($botData);

        try {
            foreach ($validatedData['data'] as $entry) {
                // Prepare JSON strings for the stored procedure
                $weeklyData = json_encode(
                    array_map(function ($x, $y) {
                        return ['day_name' => $x, 'expense' => $y];
                    }, $entry['chart_data']['weekly']['x'], $entry['chart_data']['weekly']['y'])
                );

                $monthlyData = json_encode(
                    array_map(function ($x, $y) {
                        return ['week_name' => $x, 'expense' => $y];
                    }, $entry['chart_data']['monthly']['x'], $entry['chart_data']['monthly']['y'])
                );

                $yearlyData = json_encode(
                    array_map(function ($x, $y) {
                        return ['month_name' => $x, 'expense' => $y];
                    }, $entry['chart_data']['yearly']['x'], $entry['chart_data']['yearly']['y'])
                );

                $forecast = json_encode($entry['forecast']);
                $insights = json_encode([
                    'forecasting_message' => $entry['forecasting_message'],
                    'insights' => $entry['insights'],
                    'saving_percentage' => $entry['saving_percentage'],
                    'spending_percentage' => $entry['spending_percentage'],
                ]);

                // Call the stored procedure
                DB::statement('CALL AddUserBotInfo(?, ?, ?, ?, ?, ?, ?)', [
                    $entry['user_id'],
                    $weeklyData,
                    $monthlyData,
                    $yearlyData,
                    $forecast,
                    $insights,
                    $entry['thread_id'],
                ]);
            }

            return response()->json([
                'message' => 'Bot data stored successfully',
            ], 201);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Failed to store bot data',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    private function validateBotData(array $botData)
    {
        // Validate the botData
        return Validator::make($botData, [
            'data' => 'required|array',
            'data.*.chart_data' => 'required|array',
            'data.*.chart_data.monthly' => 'required|array',
            'data.*.chart_data.weekly' => 'required|array',
            'data.*.chart_data.yearly' => 'required|array',
            'data.*.forecast' => 'required|array',
            'data.*.forecasting_message' => 'required|string',
            'data.*.insights' => 'required|string',
            'data.*.saving_percentage' => 'required|string',
            'data.*.spending_percentage' => 'required|string',
            'data.*.thread_id' => 'required|string',
            'data.*.user_id' => 'required|integer|exists:users,user_ID',
        ])->validate();
    }

}
