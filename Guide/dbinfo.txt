Stored procedures

01.
Procedure name : CreateUserAccount

DELIMITER //

CREATE PROCEDURE CreateUserAccount(
    IN userType ENUM('Customer', 'Professional', 'Admin'),
    IN userDOB DATE,
    IN userPhone VARCHAR(20),
    IN userEmail VARCHAR(100),
    IN userPassword VARCHAR(255),
    IN userProfileImage VARCHAR(255),
    IN userBankChoice VARCHAR(255),
    IN certificateID VARCHAR(255),
    IN adminDescription TEXT,
    IN incomeSourceName VARCHAR(255),
    IN incomeAmount DECIMAL(10,2),
    IN incomeFrequency ENUM('monthly', 'annual'),
    IN incomeDescription TEXT
)
BEGIN
    DECLARE newUserID BIGINT;

    -- Insert into Users table and retrieve the last inserted ID
    INSERT INTO users (type, DOB, phone_number, email, password, profile_image, bank_choice, created_at, updated_at)
    VALUES (userType, userDOB, userPhone, userEmail, userPassword, userProfileImage, userBankChoice, NOW(), NOW());

    SET newUserID = LAST_INSERT_ID();

    -- Insert into appropriate table based on user type
    IF userType = 'Professional' THEN
        INSERT INTO professionals (user_ID, certificate_ID, status, created_at, updated_at)
        VALUES (newUserID, certificateID, 'pending', NOW(), NOW());

        -- Insert into income_sources if the user is a Professional
        INSERT INTO income_sources (user_ID, source_name, amount, frequency, description, created_at, updated_at)
        VALUES (newUserID, incomeSourceName, incomeAmount, incomeFrequency, incomeDescription, NOW(), NOW());

    ELSEIF userType = 'Customer' THEN
        INSERT INTO customers (user_ID, status, created_at, updated_at)
        VALUES (newUserID, 'active', NOW(), NOW());

        -- Insert into income_sources if the user is a Customer
        INSERT INTO income_sources (user_ID, source_name, amount, frequency, description, created_at, updated_at)
        VALUES (newUserID, incomeSourceName, incomeAmount, incomeFrequency, incomeDescription, NOW(), NOW());

    ELSEIF userType = 'Admin' THEN
        INSERT INTO admins (user_ID, description, created_at, updated_at)
        VALUES (newUserID, adminDescription, NOW(), NOW());
    END IF;

END //

DELIMITER ;


02.
Procedure name : ConvertCustomerToProfessional

DELIMITER //

CREATE PROCEDURE ConvertCustomerToProfessional(
    IN userID BIGINT,                          -- User ID of the customer
    IN certificateDetails JSON,                 -- JSON array of certificates
    IN professionalType ENUM('Accountant', 'Financial Advisor', 'Stock Broker', 'Banker', 'Insurance Agent', 'Investment Specialist', 'Tax Consultant', 'Real Estate Agent', 'Loan Officer', 'Wealth Manager', 'Mortgage Advisor', 'Retirement Planner', 'Business Consultant', 'Other') -- Type of professional
)
BEGIN
    DECLARE professionalID BIGINT;
    DECLARE certificateIndex INT DEFAULT 0;
    DECLARE certificateCount INT;
    DECLARE certificateID VARCHAR(255);
    DECLARE certificateName VARCHAR(255);
    DECLARE certificateDate DATE;
    DECLARE certificateImage VARCHAR(255);

    -- Check if the user exists in the 'customers' table and is active
    IF EXISTS (SELECT 1 FROM customers WHERE user_ID = userID AND status = 'active') THEN

        -- Step 1: Create the Professional record with default status 'pending' and the specified type
        INSERT INTO professionals (user_ID, status, type, created_at, updated_at)
        VALUES (userID, 'pending', professionalType, NOW(), NOW());

        SET professionalID = userID;  -- Since userID is used as the professional_ID in professionals table

        -- Step 2: Insert multiple certificates from JSON
        SET certificateCount = JSON_LENGTH(certificateDetails);

        -- Loop through each certificate in the JSON array
        WHILE certificateIndex < certificateCount DO
            -- Extract the certificate details from the JSON array
            SET certificateID = JSON_UNQUOTE(JSON_EXTRACT(certificateDetails, CONCAT('$[', certificateIndex, '].certificateID')));
            SET certificateName = JSON_UNQUOTE(JSON_EXTRACT(certificateDetails, CONCAT('$[', certificateIndex, '].certificateName')));
            SET certificateDate = JSON_UNQUOTE(JSON_EXTRACT(certificateDetails, CONCAT('$[', certificateIndex, '].certificateDate')));
            SET certificateImage = JSON_UNQUOTE(JSON_EXTRACT(certificateDetails, CONCAT('$[', certificateIndex, '].certificateImage')));

            -- Insert the certificate into the certificates table
            INSERT INTO certificates (professional_ID, certificate_ID, certificate_name, certificate_date, certificate_image, created_at, updated_at)
            VALUES (professionalID, certificateID, certificateName, certificateDate, certificateImage, NOW(), NOW());

            -- Move to the next certificate in the array
            SET certificateIndex = certificateIndex + 1;
        END WHILE;

        -- Step 3: Update the customer's status to 'converted'
        UPDATE customers
        SET status = 'converted', updated_at = NOW()
        WHERE user_ID = userID;

    ELSE
        -- If the user is not found or not an active customer, raise an error
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'User is not an active customer';
    END IF;

END //

DELIMITER ;

03.
Procedure name : AddExpense
DELIMITER //

CREATE PROCEDURE AddExpense(
    IN userID BIGINT,                           -- User ID of the person adding the expense
    IN expensesDetails JSON                     -- JSON array with details for expenses (reason_id, amount, description)
)
BEGIN
    DECLARE expensesID BIGINT;
    DECLARE expenseIndex INT DEFAULT 0;
    DECLARE expensesCount INT;
    DECLARE reasonID INT;
    DECLARE amount DECIMAL(10,2);
    DECLARE description TEXT;
    DECLARE reasonName VARCHAR(255);
    DECLARE categoryID INT;

    -- Step 1: Check if the user exists in either 'customers' or 'professionals' table
    IF EXISTS (SELECT 1 FROM professionals WHERE user_ID = userID) OR EXISTS (SELECT 1 FROM customers WHERE user_ID = userID) THEN

        -- Step 2: Insert into the expenses table (without comment)
        INSERT INTO expenses (user_ID, created_at, updated_at)
        VALUES (userID, NOW(), NOW());

        -- Get the expenses ID of the newly inserted expense
        SET expensesID = LAST_INSERT_ID();

        -- Step 3: Process the expense details (insert into expenses_list)
        SET expensesCount = JSON_LENGTH(expensesDetails);

        -- Loop through the JSON array of expense details
        WHILE expenseIndex < expensesCount DO
            -- Extract each expense detail from the JSON array
            SET reasonID = JSON_UNQUOTE(JSON_EXTRACT(expensesDetails, CONCAT('$[', expenseIndex, '].reason_ID')));
            SET amount = JSON_UNQUOTE(JSON_EXTRACT(expensesDetails, CONCAT('$[', expenseIndex, '].amount')));
            SET description = JSON_UNQUOTE(JSON_EXTRACT(expensesDetails, CONCAT('$[', expenseIndex, '].description')));

            -- Insert into the expenses_list table
            INSERT INTO expenses_list (reason_ID, amount, description, created_at, updated_at, expenses_id)
            VALUES (reasonID, amount, description, NOW(), NOW(), expensesID);

            -- Step 4: Retrieve the reason name and category based on the reason_ID
            SELECT reason, category_ID INTO reasonName, categoryID
            FROM reasons
            WHERE reason_ID = reasonID;

            -- Print or log reason and category (if needed for debugging purposes)
            -- SELECT reasonName, categoryID;

            -- Move to the next expense detail in the JSON array
            SET expenseIndex = expenseIndex + 1;
        END WHILE;

        -- Return success message
        SELECT 'Expense added successfully' AS message;

    ELSE
        -- If the user does not exist in 'customers' or 'professionals', raise an error
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'User not found in customers or professionals table';
    END IF;

END //

DELIMITER ;


04.
Procedure name : UpdateExpense

DELIMITER //

CREATE PROCEDURE UpdateExpense(
    IN expenseID BIGINT,
    IN userID BIGINT,
    IN expensesDetails JSON
)
BEGIN
    DECLARE expenseIndex INT DEFAULT 0;
    DECLARE expensesCount INT;
    DECLARE reasonID INT;
    DECLARE amount DECIMAL(10,2);
    DECLARE description TEXT;

    -- Step 1: Check if the expense exists and belongs to the user
    IF EXISTS (SELECT 1 FROM expenses WHERE expenses_ID = expenseID AND user_ID = userID) THEN

        -- Step 2: Update the expense record (optional, if needed)
        UPDATE expenses
        SET updated_at = NOW()
        WHERE expenses_ID = expenseID;

        -- Step 3: Delete old entries in expenses_list
        DELETE FROM expenses_list WHERE expenses_id = expenseID;

        -- Step 4: Process the expense details (insert into expenses_list)
        SET expensesCount = JSON_LENGTH(expensesDetails);

        -- Loop through the JSON array of expense details
        WHILE expenseIndex < expensesCount DO
            -- Extract each expense detail from the JSON array
            SET reasonID = JSON_UNQUOTE(JSON_EXTRACT(expensesDetails, CONCAT('$[', expenseIndex, '].reason_ID')));
            SET amount = JSON_UNQUOTE(JSON_EXTRACT(expensesDetails, CONCAT('$[', expenseIndex, '].amount')));
            SET description = JSON_UNQUOTE(JSON_EXTRACT(expensesDetails, CONCAT('$[', expenseIndex, '].description')));

            -- Insert the updated expense details into expenses_list
            INSERT INTO expenses_list (reason_ID, amount, description, created_at, updated_at, expenses_id)
            VALUES (reasonID, amount, description, NOW(), NOW(), expenseID);

            -- Move to the next expense detail in the JSON array
            SET expenseIndex = expenseIndex + 1;
        END WHILE;

        -- Return success message
        SELECT 'Expense updated successfully' AS message;

    ELSE
        -- If the expense does not exist or the user does not own it, raise an error
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Expense not found or user not authorized';
    END IF;

END //

DELIMITER ;


05.
Procedure name : GetUserExpensesInfo

DELIMITER //

CREATE PROCEDURE GetUserExpensesInfo(
    IN userID BIGINT                              -- User ID to fetch expenses for
)
BEGIN
    SELECT
        expenses.expenses_ID,
        expenses.user_ID,
        expenses.created_at AS expense_created_at,
        expenses.updated_at AS expense_updated_at,
        expenses_list.expenseslist_ID,
        expenses_list.amount,
        expenses_list.description,
        reasons.reason,
        reasons.reason_ID,
        categories.category AS category_name,
        categories.category_ID
    FROM expenses
    INNER JOIN expenses_list ON expenses.expenses_ID = expenses_list.expenses_id
    INNER JOIN reasons ON expenses_list.reason_ID = reasons.reason_ID
    INNER JOIN categories ON reasons.category_ID = categories.category_ID
    WHERE expenses.user_ID = userID;
END //

DELIMITER ;


06.
Procedure name :


07.
Procedure name :


08.
Procedure name :


09.
Procedure name :


10.
Procedure name :


11.
Procedure name :
