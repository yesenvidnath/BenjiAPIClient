Stored procedures

01.
Procedure name : CreateUserAccount

DELIMITER //

CREATE PROCEDURE CreateUserAccount(
    IN userType ENUM('Customer', 'Professional', 'Admin'),
    IN userDOB DATE,
    IN userPhone VARCHAR(20),
    IN userEmail VARCHAR(100),
    IN userPassword VARCHAR(255),
    IN userProfileImage VARCHAR(255),
    IN userBankChoice VARCHAR(255),
    IN certificateID VARCHAR(255),
    IN adminDescription TEXT,
    IN incomeSourceName VARCHAR(255),
    IN incomeAmount DECIMAL(10,2),
    IN incomeFrequency ENUM('monthly', 'annual'),
    IN incomeDescription TEXT
)
BEGIN
    DECLARE newUserID BIGINT;

    -- Insert into Users table and retrieve the last inserted ID
    INSERT INTO users (type, DOB, phone_number, email, password, profile_image, bank_choice, created_at, updated_at)
    VALUES (userType, userDOB, userPhone, userEmail, userPassword, userProfileImage, userBankChoice, NOW(), NOW());

    SET newUserID = LAST_INSERT_ID();

    -- Insert into appropriate table based on user type
    IF userType = 'Professional' THEN
        INSERT INTO professionals (user_ID, certificate_ID, status, created_at, updated_at)
        VALUES (newUserID, certificateID, 'pending', NOW(), NOW());

        -- Insert into income_sources if the user is a Professional
        INSERT INTO income_sources (user_ID, source_name, amount, frequency, description, created_at, updated_at)
        VALUES (newUserID, incomeSourceName, incomeAmount, incomeFrequency, incomeDescription, NOW(), NOW());

    ELSEIF userType = 'Customer' THEN
        INSERT INTO customers (user_ID, status, created_at, updated_at)
        VALUES (newUserID, 'active', NOW(), NOW());

        -- Insert into income_sources if the user is a Customer
        INSERT INTO income_sources (user_ID, source_name, amount, frequency, description, created_at, updated_at)
        VALUES (newUserID, incomeSourceName, incomeAmount, incomeFrequency, incomeDescription, NOW(), NOW());

    ELSEIF userType = 'Admin' THEN
        INSERT INTO admins (user_ID, description, created_at, updated_at)
        VALUES (newUserID, adminDescription, NOW(), NOW());
    END IF;

END //

DELIMITER ;


02.
Procedure name : ConvertCustomerToProfessional

DELIMITER //

CREATE PROCEDURE ConvertCustomerToProfessional(
    IN userID BIGINT,                          -- User ID of the customer
    IN certificateDetails JSON,                 -- JSON array of certificates
    IN professionalType ENUM('Accountant', 'Financial Advisor', 'Stock Broker', 'Banker', 'Insurance Agent', 'Investment Specialist', 'Tax Consultant', 'Real Estate Agent', 'Loan Officer', 'Wealth Manager', 'Mortgage Advisor', 'Retirement Planner', 'Business Consultant', 'Other') -- Type of professional
)
BEGIN
    DECLARE professionalID BIGINT;
    DECLARE certificateIndex INT DEFAULT 0;
    DECLARE certificateCount INT;
    DECLARE certificateID VARCHAR(255);
    DECLARE certificateName VARCHAR(255);
    DECLARE certificateDate DATE;
    DECLARE certificateImage VARCHAR(255);

    -- Check if the user exists in the 'customers' table and is active
    IF EXISTS (SELECT 1 FROM customers WHERE user_ID = userID AND status = 'active') THEN

        -- Step 1: Create the Professional record with default status 'pending' and the specified type
        INSERT INTO professionals (user_ID, status, type, created_at, updated_at)
        VALUES (userID, 'pending', professionalType, NOW(), NOW());

        SET professionalID = userID;  -- Since userID is used as the professional_ID in professionals table

        -- Step 2: Insert multiple certificates from JSON
        SET certificateCount = JSON_LENGTH(certificateDetails);

        -- Loop through each certificate in the JSON array
        WHILE certificateIndex < certificateCount DO
            -- Extract the certificate details from the JSON array
            SET certificateID = JSON_UNQUOTE(JSON_EXTRACT(certificateDetails, CONCAT('$[', certificateIndex, '].certificateID')));
            SET certificateName = JSON_UNQUOTE(JSON_EXTRACT(certificateDetails, CONCAT('$[', certificateIndex, '].certificateName')));
            SET certificateDate = JSON_UNQUOTE(JSON_EXTRACT(certificateDetails, CONCAT('$[', certificateIndex, '].certificateDate')));
            SET certificateImage = JSON_UNQUOTE(JSON_EXTRACT(certificateDetails, CONCAT('$[', certificateIndex, '].certificateImage')));

            -- Insert the certificate into the certificates table
            INSERT INTO certificates (professional_ID, certificate_ID, certificate_name, certificate_date, certificate_image, created_at, updated_at)
            VALUES (professionalID, certificateID, certificateName, certificateDate, certificateImage, NOW(), NOW());

            -- Move to the next certificate in the array
            SET certificateIndex = certificateIndex + 1;
        END WHILE;

        -- Step 3: Update the customer's status to 'converted'
        UPDATE customers
        SET status = 'converted', updated_at = NOW()
        WHERE user_ID = userID;

    ELSE
        -- If the user is not found or not an active customer, raise an error
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'User is not an active customer';
    END IF;

END //

DELIMITER ;

03.
Procedure name :

DELIMITER //

CREATE PROCEDURE AddExpense(
    IN authUserID BIGINT,                         -- Authenticated user ID
    IN reasonID BIGINT,                           -- Reason ID from 'reasons' table
    IN amount DECIMAL(10, 2),                     -- Expense amount
    IN comment TEXT,                              -- Comment for the expense
    IN description VARCHAR(255)                   -- Description for the expense list
)
BEGIN
    DECLARE isAdmin BOOLEAN;
    DECLARE expensesListID BIGINT;               -- Declare the expensesListID variable at the beginning

    -- Step 1: Check if the authenticated user is an admin
    SET isAdmin = EXISTS (SELECT 1 FROM admins WHERE user_ID = authUserID);

    -- If the user is not an admin, deny access
    IF NOT isAdmin THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Unauthorized. Only admins can add expenses.';
    END IF;

    -- Step 2: Insert the expense details into the 'expenses_list' table
    INSERT INTO expenses_list (reason_ID, amount, description, created_at, updated_at)
    VALUES (reasonID, amount, description, NOW(), NOW());

    -- Step 3: Get the ID of the inserted record in 'expenses_list'
    SET expensesListID = LAST_INSERT_ID();

    -- Step 4: Insert the expense record into the 'expenses' table
    INSERT INTO expenses (user_ID, expenseslist_ID, comment, created_at, updated_at)
    VALUES (authUserID, expensesListID, comment, NOW(), NOW());

END //

DELIMITER ;


04.
Procedure name :

05.
Procedure name :
